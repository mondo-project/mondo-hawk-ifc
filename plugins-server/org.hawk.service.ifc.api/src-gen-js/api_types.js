//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


IFCExportStatus = {
  'CANCELLED' : 0,
  'DONE' : 1,
  'FAILED' : 2,
  'RUNNING' : 3,
  'SCHEDULED' : 4
};
IFCExportJob = function(args) {
  this.jobID = null;
  this.status = null;
  this.message = null;
  if (args) {
    if (args.jobID !== undefined && args.jobID !== null) {
      this.jobID = args.jobID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field jobID is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
IFCExportJob.prototype = {};
IFCExportJob.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFCExportJob.prototype.write = function(output) {
  output.writeStructBegin('IFCExportJob');
  if (this.jobID !== null && this.jobID !== undefined) {
    output.writeFieldBegin('jobID', Thrift.Type.STRING, 1);
    output.writeString(this.jobID);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFCExportOptions = function(args) {
  this.repositoryPattern = '*';
  this.filePatterns = null;
  this.includeRules = null;
  this.excludeRules = null;
  if (args) {
    if (args.repositoryPattern !== undefined && args.repositoryPattern !== null) {
      this.repositoryPattern = args.repositoryPattern;
    }
    if (args.filePatterns !== undefined && args.filePatterns !== null) {
      this.filePatterns = Thrift.copyList(args.filePatterns, [null]);
    }
    if (args.includeRules !== undefined && args.includeRules !== null) {
      this.includeRules = Thrift.copyMap(args.includeRules, [Thrift.copyMap, Thrift.copyList, null]);
    }
    if (args.excludeRules !== undefined && args.excludeRules !== null) {
      this.excludeRules = Thrift.copyMap(args.excludeRules, [Thrift.copyMap, Thrift.copyList, null]);
    }
  }
};
IFCExportOptions.prototype = {};
IFCExportOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.repositoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.filePatterns = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.filePatterns.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.includeRules = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          if (_i12 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key13 = null;
          var val14 = null;
          key13 = input.readString().value;
          var _size15 = 0;
          var _rtmp319;
          val14 = {};
          var _ktype16 = 0;
          var _vtype17 = 0;
          _rtmp319 = input.readMapBegin();
          _ktype16 = _rtmp319.ktype;
          _vtype17 = _rtmp319.vtype;
          _size15 = _rtmp319.size;
          for (var _i20 = 0; _i20 < _size15; ++_i20)
          {
            if (_i20 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key21 = null;
            var val22 = null;
            key21 = input.readString().value;
            var _size23 = 0;
            var _rtmp327;
            val22 = [];
            var _etype26 = 0;
            _rtmp327 = input.readSetBegin();
            _etype26 = _rtmp327.etype;
            _size23 = _rtmp327.size;
            for (var _i28 = 0; _i28 < _size23; ++_i28)
            {
              var elem29 = null;
              elem29 = input.readString().value;
              val22.push(elem29);
            }
            input.readSetEnd();
            val14[key21] = val22;
          }
          input.readMapEnd();
          this.includeRules[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size30 = 0;
        var _rtmp334;
        this.excludeRules = {};
        var _ktype31 = 0;
        var _vtype32 = 0;
        _rtmp334 = input.readMapBegin();
        _ktype31 = _rtmp334.ktype;
        _vtype32 = _rtmp334.vtype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          if (_i35 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key36 = null;
          var val37 = null;
          key36 = input.readString().value;
          var _size38 = 0;
          var _rtmp342;
          val37 = {};
          var _ktype39 = 0;
          var _vtype40 = 0;
          _rtmp342 = input.readMapBegin();
          _ktype39 = _rtmp342.ktype;
          _vtype40 = _rtmp342.vtype;
          _size38 = _rtmp342.size;
          for (var _i43 = 0; _i43 < _size38; ++_i43)
          {
            if (_i43 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key44 = null;
            var val45 = null;
            key44 = input.readString().value;
            var _size46 = 0;
            var _rtmp350;
            val45 = [];
            var _etype49 = 0;
            _rtmp350 = input.readSetBegin();
            _etype49 = _rtmp350.etype;
            _size46 = _rtmp350.size;
            for (var _i51 = 0; _i51 < _size46; ++_i51)
            {
              var elem52 = null;
              elem52 = input.readString().value;
              val45.push(elem52);
            }
            input.readSetEnd();
            val37[key44] = val45;
          }
          input.readMapEnd();
          this.excludeRules[key36] = val37;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFCExportOptions.prototype.write = function(output) {
  output.writeStructBegin('IFCExportOptions');
  if (this.repositoryPattern !== null && this.repositoryPattern !== undefined) {
    output.writeFieldBegin('repositoryPattern', Thrift.Type.STRING, 1);
    output.writeString(this.repositoryPattern);
    output.writeFieldEnd();
  }
  if (this.filePatterns !== null && this.filePatterns !== undefined) {
    output.writeFieldBegin('filePatterns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.filePatterns.length);
    for (var iter53 in this.filePatterns)
    {
      if (this.filePatterns.hasOwnProperty(iter53))
      {
        iter53 = this.filePatterns[iter53];
        output.writeString(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeRules !== null && this.includeRules !== undefined) {
    output.writeFieldBegin('includeRules', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.includeRules));
    for (var kiter54 in this.includeRules)
    {
      if (this.includeRules.hasOwnProperty(kiter54))
      {
        var viter55 = this.includeRules[kiter54];
        output.writeString(kiter54);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter55));
        for (var kiter56 in viter55)
        {
          if (viter55.hasOwnProperty(kiter56))
          {
            var viter57 = viter55[kiter56];
            output.writeString(kiter56);
            output.writeSetBegin(Thrift.Type.STRING, viter57.length);
            for (var iter58 in viter57)
            {
              if (viter57.hasOwnProperty(iter58))
              {
                iter58 = viter57[iter58];
                output.writeString(iter58);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.excludeRules !== null && this.excludeRules !== undefined) {
    output.writeFieldBegin('excludeRules', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.excludeRules));
    for (var kiter59 in this.excludeRules)
    {
      if (this.excludeRules.hasOwnProperty(kiter59))
      {
        var viter60 = this.excludeRules[kiter59];
        output.writeString(kiter59);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter60));
        for (var kiter61 in viter60)
        {
          if (viter60.hasOwnProperty(kiter61))
          {
            var viter62 = viter60[kiter61];
            output.writeString(kiter61);
            output.writeSetBegin(Thrift.Type.STRING, viter62.length);
            for (var iter63 in viter62)
            {
              if (viter62.hasOwnProperty(iter63))
              {
                iter63 = viter62[iter63];
                output.writeString(iter63);
              }
            }
            output.writeSetEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

